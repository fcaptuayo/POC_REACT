{"version":3,"sources":["appnavbar/AppNavbar.js","Home.js","group/GroupList.js","group/GroupLazyList.js","group/GroupEdit.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isOpen","toggle","bind","assertThisInitialized","setState","react_default","a","createElement","reactstrap_es","color","dark","expand","tag","Link","to","onClick","navbar","className","href","Component","Home","AppNavbar_AppNavbar","fluid","GroupList","groups","isLoading","remove","_this2","fetch","then","response","json","data","id","concat","method","headers","Accept","Content-Type","updatedGroups","toConsumableArray","_this3","filter","i","_this4","_this$state","groupList","map","group","address","city","stateOrProvince","key","style","whiteSpace","name","events","event","Intl","DateTimeFormat","year","month","day","format","Date","date","title","size","width","GroupLazyList","items","loading","first","rows","totalRecords","onPage","totalElement","console","log","parseInt","get","slice","context","filterJsonStringBase64","btoa","unescape","encodeURIComponent","JSON","stringify","tableHeader","float","fontWeight","datatable","DataTable","ref","el","dt","value","lazy","paginator","header","Column","field","GroupEdit","emptyItem","country","postalCode","item","handleChange","handleSubmit","match","params","target","objectSpread","preventDefault","body","history","push","onSubmit","for","type","onChange","autoComplete","withRouter","App","BrowserRouter","Switch","Route","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9b6ef9d7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Collapse, Nav, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\nimport { Link } from 'react-router-dom';\n\nexport default class AppNavbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {isOpen: false};\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    render() {\n        return <Navbar color=\"dark\" dark expand=\"md\">\n            <NavbarBrand tag={Link} to=\"/\">Home</NavbarBrand>\n            <NavbarToggler onClick={this.toggle}/>\n        <Collapse isOpen={this.state.isOpen} navbar>\n        <Nav className=\"ml-auto\" navbar>\n\n        <NavItem>\n        <NavLink href=\"https://github.com\">GitHub</NavLink>\n            </NavItem>\n            </Nav>\n            </Collapse>\n            </Navbar>;\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport AppNavbar from './appnavbar/AppNavbar';\nimport { Link } from 'react-router-dom';\nimport { Button, Container } from 'reactstrap';\n\nclass Home extends Component {\n    render() {\n        return (\n            <div>\n                <AppNavbar/>\n                <Container fluid>\n            <Button color=\"link\"><Link to=\"/groups\">Manage JUG Tour</Link></Button>\n            </Container>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import React, {Component} from 'react';\nimport {Button, ButtonGroup, Container, Table} from 'reactstrap';\nimport AppNavbar from '../appnavbar/AppNavbar';\nimport {Link} from 'react-router-dom';\n\nclass GroupList extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {groups: [], isLoading: true};\n        this.remove = this.remove.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({isLoading: true});\n        fetch('api-rest/groups')\n            .then(response => response.json())\n            .then(data => this.setState({groups: data, isLoading: false}));\n    }\n\n    async remove(id) {\n        await fetch(`/api-rest/group/${id}`, {\n            method: 'DELETE',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        }).then(() => {\n            let updatedGroups = [...this.state.groups].filter(i => i.id !== id);\n            this.setState({groups: updatedGroups});\n        });\n    }\n\n    render() {\n        const {groups, isLoading} = this.state;\n\n        if (isLoading) {\n            return <p>Loading...</p>;\n        }\n\n        const groupList = groups.map(group => {\n            const address = `${group.address || ''} ${group.city || ''} ${group.stateOrProvince || ''}`;\n            return <tr key={group.id}>\n                <td style={{whiteSpace: 'nowrap'}}>{group.name}</td>\n                <td>{address}</td>\n                <td>{group.events.map(event => {\n                    return <div key={event.id}>{new Intl.DateTimeFormat('en-US', {\n                        year: 'numeric',\n                        month: 'long',\n                        day: '2-digit'\n                    }).format(new Date(event.date))}: {event.title}</div>\n                })}</td>\n                <td>\n                    <ButtonGroup>\n                        <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/groups/\" + group.id}>Edit</Button>\n                        <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(group.id)}>Delete</Button>\n                    </ButtonGroup>\n                </td>\n            </tr>\n        });\n\n        return (\n            <div>\n                <AppNavbar/>\n                <Container fluid>\n                    <div className=\"float-right\">\n                        <Button color=\"success\" tag={Link} to=\"/groups/new\">Add Group</Button>\n                    </div>\n                    <h3>My JUG Tour</h3>\n                    <Table className=\"mt-4\">\n                        <thead>\n                        <tr>\n                            <th width=\"20%\">Name</th>\n                            <th width=\"20%\">Location</th>\n                            <th>Events</th>\n                            <th width=\"10%\">Actions</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {groupList}\n                        </tbody>\n                    </Table>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default GroupList;\n","import React, {Component} from 'react';\nimport {DataTable} from 'primereact/components/datatable/DataTable';\nimport {Column} from 'primereact/components/column/Column';\n\nclass GroupLazyList extends Component {\n    constructor() {\n        super();\n        this.state = {\n            items: [],\n            loading: true,\n            first: 0,\n            rows: 2,\n            totalRecords: 0\n        };\n        this.onPage = this.onPage.bind(this);\n    }\n\n    componentDidMount() {\n        let totalElement = 0;\n        this.setState({isLoading: true});\n        fetch('api-rest/paginator/groups/')\n            .then(function (response) {\n                console.log('response =', response);\n                totalElement = parseInt(response.headers.get('x-result-count'));\n                return response.json();\n            })\n            .then(data => {\n                this.setState({totalRecords: totalElement, items: data.slice(0, this.state.rows), loading: false})\n            });\n    }\n\n    onPage(event) {\n        let context = this;\n        let totalElement = 0;\n        context.setState({\n            loading: true\n        });\n        context.setState({isLoading: true});\n        let filterJsonStringBase64 = btoa(unescape(encodeURIComponent(JSON.stringify(event))));\n        fetch('api-rest/paginator/groups/?filter=' + filterJsonStringBase64)\n            .then(function (response) {\n                totalElement = parseInt(response.headers.get('x-result-count'));\n                return response.json();\n            })\n            .then(data => {\n                context.setState({first: event.first, totalRecords: totalElement, items: data, loading: false})\n            });\n    }\n\n    render() {\n        let tableHeader = <div className=\"ui-helper-clearfix\" style={{width: '100%'}}>\n            <label style={{float: 'left', fontWeight: 'bold'}}>PrimeReact lazy table with filtering and sorting</label>\n        </div>\n        let datatable = <DataTable ref={(el) => this.dt = el}\n                                   value={this.state.items}\n                                   lazy={true}\n                                   onPage={this.onPage}\n                                   paginator={true}\n                                   first={this.state.first}\n                                   rows={this.state.rows}\n                                   totalRecords={this.state.totalRecords}\n                                   header={tableHeader}>\n            <Column field=\"id\" header=\"ID\"/>\n            <Column field=\"name\" header=\"Nombre\"/>\n        </DataTable>;\n        return (\n            <div>\n                {datatable}\n            </div>\n        );\n    }\n}\n\nexport default GroupLazyList;\n","import React, {Component} from 'react';\nimport {Link, withRouter} from 'react-router-dom';\nimport {Button, Container, Form, FormGroup, Input, Label} from 'reactstrap';\nimport AppNavbar from '../appnavbar/AppNavbar';\n\nclass GroupEdit extends Component {\n\n    emptyItem = {\n        name: '',\n        address: '',\n        city: '',\n        stateOrProvince: '',\n        country: '',\n        postalCode: ''\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            item: this.emptyItem\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    async componentDidMount() {\n        if (this.props.match.params.id !== 'new') {\n            const group = await (await fetch(`/api-rest/group/${this.props.match.params.id}`)).json();\n            this.setState({item: group});\n        }\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        let item = {...this.state.item};\n        item[name] = value;\n        this.setState({item});\n    }\n\n    async handleSubmit(event) {\n        event.preventDefault();\n        const {item} = this.state;\n\n        await fetch('/api-rest/group', {\n            method: (item.id) ? 'PUT' : 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(item),\n        });\n        this.props.history.push('/groups');\n    }\n\n    render() {\n        const {item} = this.state;\n        const title = <h2>{item.id ? 'Edit Group' : 'Add Group'}</h2>;\n\n        return <div>\n            <AppNavbar/>\n            <Container>\n                {title}\n                <Form onSubmit={this.handleSubmit}>\n                    <FormGroup>\n                        <Label for=\"name\">Name</Label>\n                        <Input type=\"text\" name=\"name\" id=\"name\" value={item.name || ''}\n                               onChange={this.handleChange} autoComplete=\"name\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"address\">Address</Label>\n                        <Input type=\"text\" name=\"address\" id=\"address\" value={item.address || ''}\n                               onChange={this.handleChange} autoComplete=\"address-level1\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"city\">City</Label>\n                        <Input type=\"text\" name=\"city\" id=\"city\" value={item.city || ''}\n                               onChange={this.handleChange} autoComplete=\"address-level1\"/>\n                    </FormGroup>\n                    <div className=\"row\">\n                        <FormGroup className=\"col-md-4 mb-3\">\n                            <Label for=\"stateOrProvince\">State/Province</Label>\n                            <Input type=\"text\" name=\"stateOrProvince\" id=\"stateOrProvince\"\n                                   value={item.stateOrProvince || ''}\n                                   onChange={this.handleChange} autoComplete=\"address-level1\"/>\n                        </FormGroup>\n                        <FormGroup className=\"col-md-5 mb-3\">\n                            <Label for=\"country\">Country</Label>\n                            <Input type=\"text\" name=\"country\" id=\"country\" value={item.country || ''}\n                                   onChange={this.handleChange} autoComplete=\"address-level1\"/>\n                        </FormGroup>\n                        <FormGroup className=\"col-md-3 mb-3\">\n                            <Label for=\"country\">Postal Code</Label>\n                            <Input type=\"text\" name=\"postalCode\" id=\"postalCode\" value={item.postalCode || ''}\n                                   onChange={this.handleChange} autoComplete=\"address-level1\"/>\n                        </FormGroup>\n                    </div>\n                    <FormGroup>\n                        <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\n                        <Button color=\"secondary\" tag={Link} to=\"/groups\">Cancel</Button>\n                    </FormGroup>\n                </Form>\n            </Container>\n        </div>\n    }\n}\n\nexport default withRouter(GroupEdit);\n","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './Home';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport GroupList from './group/GroupList';\nimport GroupLazyList from './group/GroupLazyList';\nimport GroupEdit from './group/GroupEdit';\n\nclass App extends Component {\n    render() {\n        return (\n            <Router>\n                <Switch>\n                    <Route path='/' exact={true} component={Home}/>\n                    <Route path='/groups' exact={true} component={GroupList}/>\n                    <Route path='/groups/:id' component={GroupEdit}/>\n                    <Route path='/groupsLazy' exact={true} component={GroupLazyList}/>\n                </Switch>\n            </Router>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a param, after all the\n// existing tabs open on the param have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our param is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, group https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this param are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the param.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the param.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}